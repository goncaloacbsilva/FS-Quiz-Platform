{"version":3,"sources":["pages/Navigation.js","pages/MainPage.js","utils/submitUtils.js","pages/quizApp/submissions/SubmitMultipleChoice.js","api/knowledgeArea.js","api/questions.js","pages/quizApp/Navigation.js","pages/quizApp/submissions/SubmitQuestion.js","pages/quizApp/submissions/SubmissionSuccess.js","components/Badges.js","utils/windowDimensions.js","api/author.js","utils/questionTableUtils.js","images/question.png","components/CustomRadioButton.js","components/MultipleChoice.js","pages/quizApp/view_questions/Question.js","utils/SearchEngine.js","pages/quizApp/view_questions/QuestionsTable.js","pages/quizApp/view_questions/ViewQuestions.js","pages/quizApp/create_quiz/CreateQuiz.js","pages/quizApp/Home.js","pages/NotFound.js","routes.js","App.js","reportWebVitals.js","index.js"],"names":["NavBar","paddingLeft","separator","to","colorScheme","as","Button","rightIcon","ChevronDown","disabled","Navigation","direction","p","size","MainPage","maxW","h","w","paddingBottom","fontWeight","startDelay","stdTypingDelay","avgTypingDelay","align","FiArrowRight","ALLOWED_TYPES","SubmitUtils","validateFile","file","errorCallback","includes","type","console","log","validateName","value","error","length","validateQuestion","MultipleChoice","forwardRef","props","ref","useState","correctOption","setCorrectOption","optionA","setOptionA","optionB","setOptionB","optionC","setOptionC","optionD","setOptionD","useImperativeHandle","getCorrectAnswer","tempAnswerArray","onChange","defaultValue","event","target","id","placeholder","KnowledgeAreaAPI","getKnowledgeAreas","axios","get","getKnowledgeAreaById","QuestionsAPI","submitQuestion","formData","post","getQuestions","OpenAnswer","correctCallback","isRequired","SubmitQuestion","dificulty","setDificulty","setType","openAnswer","setOpenAnswer","questionImageUploaded","setQuestionImageUploaded","resolutionImageUploaded","setResolutionImageUploaded","knowledgeAreas","updateKnowledgeAreas","knowledgeAreaId","updateKnowledgeAreaId","redirect","setRedirect","multipleChoiceRef","useRef","questionImage","resolutionImage","toast","useToast","errorMsg","title","msg","position","description","status","duration","isClosable","onChangeQuestionImage","evt","stopPropagation","preventDefault","files","onChangeResolutionImage","useEffect","then","res","data","catch","err","message","alignItems","initialValues","author","question","onSubmit","values","actions","setTimeout","FormData","answers","current","append","Object","keys","map","key","index","finally","setSubmitting","style","display","name","validate","field","form","isInvalid","errors","touched","paddingTop","isDisabled","area","min","max","step","e","push","bind","onClick","click","leftIcon","ArrowUp","isLoading","isSubmitting","SubmissionSuccess","class","frameBorder","width","height","src","Badges","StatusBadge","used","fontSize","ReviewedBadge","reviewed","ReviewedBadgeSimple","getWindowDimensions","window","innerWidth","innerHeight","useWindowDimensions","windowDimensions","setWindowDimensions","handleResize","addEventListener","removeEventListener","AuthorAPI","getAuthors","findInDict","dict","element","forEach","el","QuestionTableUtils","TransferQuestion","this","postProcessing","Promise","resolve","reject","processedData","knowledgeAreaDB","entry","processKnowledgeArea","authorsDB","processAuthorName","checkMultipleChoice","rowData","filterArea","questions","filterQuestions","RadioCard","useRadio","getInputProps","getCheckboxProps","input","checkbox","cursor","borderWidth","borderRadius","boxShadow","_checked","bg","color","borderColor","px","py","children","options","newOptions","useRadioGroup","getRootProps","getRadioProps","group","minChildWidth","spacing","radio","QuestionOverview","undefined","boxSize","split","fallbackSrc","unknowQuestion","alt","overflowY","maxHeight","padding","resize","isReadOnly","orientation","SearchEngine","uid","dataset","engine","JsSearch","addDocument","searchIndexes","query","addIndex","search","rowKey","ExpandCell","expandedRowKeys","dataKey","appearance","icon","some","Minus","Add","StatusCell","ReviewCell","ViewQuestions","setExpandedRowKeys","updateQuestions","knowledgeArea","updateKnowledgeArea","updateQuery","useDisclosure","isOpen","onOpen","onClose","selectedEntry","searchEngine","pr","rowExpandedHeight","performSearch","shouldUpdateScroll","renderRowExpanded","ml","updateQuestion","maxWidth","noOfLines","content","correctanswer","affixHeader","virtualized","open","nextExpandedRowKeys","flexGrow","Question","mr","QuestionsTable","lanes","editLaneTitle","label","cards","CreateQuiz","cardDragClass","laneStyle","cardStyle","QuizAppHome","NotFound","AppRoutes","exact","path","App","useColorMode","colorMode","toggleColorMode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Provider","ReactDOM","render","initialColorMode","document","getElementById"],"mappings":"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","file":"static/js/main.90dca2c7.chunk.js","sourcesContent":["import { \n        Flex, Heading, \n        Button, Spacer, \n        Breadcrumb, BreadcrumbItem, \n        MenuItem, Menu, \n        MenuButton, MenuList,\n      } from \"@chakra-ui/react\"\nimport { ChevronDownIcon } from '@chakra-ui/icons'\nimport {\n  Link\n} from \"react-router-dom\";\n\nfunction NavBar() {\n    return (\n    <Breadcrumb paddingLeft=\"10\" separator=\" \">\n      <BreadcrumbItem>\n        <Link to=\"/\"><Button colorScheme=\"blue\">Home</Button></Link>\n      </BreadcrumbItem>\n      <BreadcrumbItem>\n        <Menu>\n          <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\n            Applications\n          </MenuButton>\n          <MenuList>\n            <MenuItem><Link to=\"/quizApp/\">FST Quiz App</Link></MenuItem>\n            <MenuItem disabled><Link to=\"/logDBApp/\">Log DB</Link></MenuItem>\n          </MenuList>\n        </Menu>\n      </BreadcrumbItem>\n    </Breadcrumb>\n    );\n  }\n\nfunction Navigation() {\nreturn (\n    <Flex direction=\"row\" p=\"4\">\n        <Heading p=\"2\" size=\"md\">FST Suite</Heading>\n        <NavBar/>\n        <Spacer />\n    </Flex>\n    );\n}\n\nexport default Navigation;","import { Flex, Heading, Button, Container, VStack, Icon } from \"@chakra-ui/react\"\nimport { Link } from \"react-router-dom\";\nimport { FiArrowRight } from \"react-icons/fi\";\nimport Navigation from \"./Navigation\";\nimport Typist from 'react-typist';\nimport 'react-typist/dist/Typist.css'\n\nfunction MainPage() {\n    return (\n      <>\n      <Navigation />\n      <Container maxW=\"container.lg\" p={0}>\n        <Flex h=\"80vh\">\n            <VStack w=\"full\" h=\"full\" p={15}>\n              <Heading size=\"2xl\">FST Suite</Heading>\n              <Heading paddingBottom={10} fontWeight=\"light\" size=\"xl\">\n                <Typist startDelay={200} stdTypingDelay={50} avgTypingDelay={70}>\n                  <span>Made for performance</span>\n                </Typist>\n              </Heading>\n              <Link to=\"/quizApp/\">\n                <VStack w=\"lg\" align=\"stretch\">\n                  <Button rightIcon={<Icon as={FiArrowRight} />} colorScheme=\"blue\" size=\"lg\">FST Quiz App</Button>\n                </VStack>\n              </Link>\n              <Link to=\"/logDBApp/\">\n                <VStack w=\"lg\" align=\"stretch\">\n                  <Button disabled size=\"lg\">Log DB</Button>\n                </VStack>\n              </Link>\n            </VStack>\n        </Flex>\n      </Container>\n      </>\n    );\n}\n\nexport default MainPage;","const ALLOWED_TYPES = [\"image/jpeg\", \"image/png\", \"image/jpg\"]\nconst MAX_FILE_SIZE = 5000000\n\nfunction validateFile(file, errorCallback) {\n    if (!ALLOWED_TYPES.includes(file.type)) {\n        errorCallback(\"error\", \"File Upload Error\", \"The type of the file that you tried to upload is not valid! Try to select another one\")\n        return false;\n    }\n    if (MAX_FILE_SIZE < file.size) {\n        errorCallback(\"error\", \"File Upload Error\", \"The type of the file that you tried to upload is too big! Try to select a smaller one\")\n        return false;\n    }\n    console.log(file)\n    return true\n}\n\nfunction validateName(value) {\n    let error\n    if (!value) {\n        error = \"Name field is required\"\n    } else if (value.length < 3) {\n        error = \"The name provided is too short\"\n    } else if (value.length > 50) {\n        error = \"The name provided is too big\"\n    }\n    return error\n}\n\nfunction validateQuestion(value) {\n    let error\n    if (!value) {\n      error = \"Question field is required\"\n    }\n    return error\n}\n\nconst SubmitUtils = {\n    validateFile: validateFile,\n    validateName: validateName,\n    validateQuestion: validateQuestion,\n}\n\nexport default SubmitUtils;","import {useState, forwardRef, useImperativeHandle} from 'react';\nimport { \n    Input, HStack,\n    Radio, RadioGroup,\n} from \"@chakra-ui/react\"\n\n\nconst MultipleChoice = forwardRef((props, ref) => {\n    const [correctOption, setCorrectOption] = useState(0);\n    const [optionA, setOptionA] = useState(\"\");\n    const [optionB, setOptionB] = useState(\"\");\n    const [optionC, setOptionC] = useState(\"\");\n    const [optionD, setOptionD] = useState(\"\");\n    const choiceChars = \"ABCD\"\n\n    useImperativeHandle(ref, () => ({\n\n      getCorrectAnswer() {\n        var tempAnswerArray = []\n        tempAnswerArray[0] = optionA;\n        tempAnswerArray[1] = optionB;\n        tempAnswerArray[2] = optionC;\n        tempAnswerArray[3] = optionD;\n        return ({\n          \"correctAnswer\": tempAnswerArray[correctOption],\n          \"answerA\": optionA,\n          \"answerB\": optionB,\n          \"answerC\": optionC,\n          \"answerD\": optionD\n        })\n      }\n  \n    }));\n\n    return (\n      <RadioGroup onChange={(value) => {\n        setCorrectOption(value)\n      }\n      } defaultValue=\"0\">\n        <HStack paddingBottom=\"5\">\n            <Radio value=\"0\"></Radio>\n            <Input onChange={event => setOptionA(event.target.value)} id=\"A\" placeholder=\"Answer A\" type=\"text\" />\n            <Radio paddingLeft=\"10\" value=\"1\"></Radio>\n            <Input onChange={event => setOptionB(event.target.value)} id=\"B\" placeholder=\"Answer B\" type=\"text\" />\n        </HStack>\n        <HStack paddingBottom=\"5\">\n            <Radio value=\"2\"></Radio>\n            <Input onChange={event => setOptionC(event.target.value)} id=\"C\" placeholder=\"Answer C\" type=\"text\" />\n            <Radio paddingLeft=\"10\" value=\"3\"></Radio>\n            <Input onChange={event => setOptionD(event.target.value)} id=\"D\" placeholder=\"Answer D\" type=\"text\" />\n        </HStack>\n        <p>Option {choiceChars[correctOption]} is the correct option</p>\n      </RadioGroup>\n    );\n});\n\nexport default MultipleChoice;","import axios from 'axios'\n\n\nfunction getKnowledgeAreas() {\n  return axios.get('/api/getKnowledgeAreas')\n}\n\nfunction getKnowledgeAreaById(id) {\n  return axios.get('/api/getKnowledgeArea/' + id)\n}\n\nconst KnowledgeAreaAPI = {\n    getKnowledgeAreas,\n    getKnowledgeAreaById\n}\n\nexport default KnowledgeAreaAPI;","import axios from 'axios'\n\n\nfunction submitQuestion(formData) {\n    return axios.post('/api/submitQuestion', formData)\n};\n\nfunction getQuestions() {\n    return axios.get('/api/getQuestions')\n}\n\nconst QuestionsAPI = {\n    submitQuestion,\n    getQuestions\n}\n\nexport default QuestionsAPI;","import '../../App.css';\nimport { \n        Flex, Heading, \n        Button, Spacer, \n        Breadcrumb, BreadcrumbItem, \n        MenuItem, Menu, \n        MenuButton, MenuList,\n      } from \"@chakra-ui/react\"\nimport { ChevronDownIcon } from '@chakra-ui/icons'\nimport {\n  Link\n} from \"react-router-dom\";\n\nfunction NavBar() {\n  return (\n  <Breadcrumb paddingLeft=\"10\" separator=\" \">\n    <BreadcrumbItem>\n      <Link to=\"/\"><Button colorScheme=\"blue\">Home</Button></Link>\n    </BreadcrumbItem>\n    <BreadcrumbItem>\n      <Menu>\n        <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\n          Questions\n        </MenuButton>\n        <MenuList>\n          <MenuItem><Link to=\"/quizApp/questions/submit\"> Submit new question</Link></MenuItem>\n          <MenuItem><Link to=\"/quizApp/questions/view\">View submited questions</Link></MenuItem>\n        </MenuList>\n      </Menu>\n    </BreadcrumbItem>\n    <BreadcrumbItem>\n      <Menu>\n        <MenuButton disabled as={Button} rightIcon={<ChevronDownIcon />}>\n          Quizes\n        </MenuButton>\n        <MenuList>\n          <MenuItem><Link to=\"/quizApp/quiz/create\">Create Quiz</Link></MenuItem>\n        </MenuList>\n      </Menu>\n    </BreadcrumbItem>\n  </Breadcrumb>\n  );\n}\n\nfunction Navigation() {\n  return (\n    <Flex direction=\"row\" p=\"4\">\n      <Heading p=\"2\" size=\"md\">FST Suite</Heading>\n      <NavBar/>\n      <Spacer />\n    </Flex>\n  );\n}\n\nexport default Navigation;\n","import {useState, useRef, useEffect } from 'react';\nimport { \n        Flex, Heading, \n        Button, Container, \n        VStack, FormErrorMessage,\n        Textarea, FormControl,\n        FormLabel, Input,\n        Select, Slider,\n        SliderTrack, SliderFilledTrack,\n        SliderThumb, StatNumber, \n        Stat, HStack,\n        useToast\n      } from \"@chakra-ui/react\"\n\nimport { Redirect } from \"react-router-dom\";\nimport { Formik, Field, Form } from \"formik\"\nimport { ArrowUpIcon } from '@chakra-ui/icons'\nimport SubmitUtils from '../../../utils/submitUtils'\nimport MultipleChoice from './SubmitMultipleChoice'\n\nimport KnowledgeAreaAPI from '../../../api/knowledgeArea';\nimport QuestionsAPI from '../../../api/questions';\nimport Navigation from '../Navigation';\n\n\n\nfunction OpenAnswer({correctCallback}) {\n  return (\n    <Textarea onChange={(event) => {\n      correctCallback({\"correctAnswer\": event.target.value})\n    }} placeholder=\"Open answer goes here...\" isRequired/>\n  );\n}\n\nfunction SubmitQuestion() {\n    const [dificulty, setDificulty] = useState(2);\n    const [ type, setType ] = useState(\"default\");\n    const [ openAnswer, setOpenAnswer ] = useState(\"\");\n    const [ questionImageUploaded, setQuestionImageUploaded ] = useState(\"\");\n    const [ resolutionImageUploaded, setResolutionImageUploaded ] = useState(\"\");\n    const [ knowledgeAreas, updateKnowledgeAreas] = useState([]);\n    const [ knowledgeAreaId, updateKnowledgeAreaId] = useState(0);\n    const [ redirect, setRedirect ] = useState(false)\n    const multipleChoiceRef = useRef();\n    const questionImage = useRef(null);\n    const resolutionImage = useRef(null);\n    const toast = useToast()\n\n    function errorMsg(type, title, msg) {\n      console.log(\"ERROR_MSG: \" + msg)\n      toast({\n        title: title,\n        position: \"top\",\n        description: msg + (title.includes(\"API\") ? \". Please try to reload the page or contact EL&SW team\" : \"\"),\n        status: type,\n        duration: 3000,\n        isClosable: true,\n      })\n    }\n\n    function onChangeQuestionImage(evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n      if (!SubmitUtils.validateFile(evt.target.files[0], errorMsg)) {\n        setQuestionImageUploaded(\"\");\n        return;\n      }\n      setQuestionImageUploaded(evt.target.files[0]);\n    }\n    \n    function onChangeResolutionImage(evt) {\n      evt.stopPropagation();\n      evt.preventDefault();\n      if (!SubmitUtils.validateFile(evt.target.files[0], errorMsg)) {\n        setResolutionImageUploaded(\"\");\n        return;\n      }\n      setResolutionImageUploaded(evt.target.files[0]);\n    }\n\n    useEffect(() => {\n      updateKnowledgeAreas([])\n      KnowledgeAreaAPI.getKnowledgeAreas()\n      .then(res => res.data)\n      .then((data) => {\n        updateKnowledgeAreas(data)\n      })\n      .catch((err) => {\n        updateKnowledgeAreas([])\n        console.log(err)\n        errorMsg(\"error\", \"KnowledgeArea API Error:\", err.message)\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    return (\n      <>\n        <Navigation />\n        <Container maxW=\"container.lg\" p={0}>\n          <Flex h=\"90vh\">\n              <VStack alignItems=\"start\" w=\"full\" h=\"full\" p={15}>\n                  <Heading paddingBottom=\"5\" size=\"xl\">Submit question:</Heading>\n\n                  <Formik\n                    initialValues={\n                      {\n                        author: \"\",\n                        question: \"\",\n                      }\n                    }\n                    onSubmit={(values, actions) => {\n                      setTimeout(() => {\n\n                        var formData = new FormData()\n\n                        var answers = (type === \"multiple\") ? multipleChoiceRef.current.getCorrectAnswer() : openAnswer\n\n                        formData.append(\"author\", values.author);\n                        formData.append(\"question\", values.question);\n                        formData.append(\"areaId\", knowledgeAreaId);\n                        formData.append(\"difficulty\", dificulty);\n                        formData.append(\"type\", type);\n                        Object.keys(answers).map((key, index) => (\n                          formData.append(key, answers[key])\n                        ))\n                        formData.append(\"questionImage\", questionImageUploaded);\n                        formData.append(\"resolutionImage\", resolutionImageUploaded);\n\n                        console.log(\"SUBMIT REPORT: \")\n\n                        console.log(formData)\n                        \n                        QuestionsAPI.submitQuestion(formData).then((res) => {\n                          console.log(\"Submitted!\")\n                          setRedirect(true)\n                        })\n                        .catch((err) => {\n                          console.log(\"Submission error: \")\n                          console.log(err)\n                          errorMsg(\"error\", \"Submission API Error: \", err.message)\n                        }).finally(() => {\n                          actions.setSubmitting(false)\n                        });\n                        \n\n                      }, 500)\n                    }}\n                  >\n                    {(props) => (\n                      <Form style={{display: \"contents\"}}>\n\n                        <Field name=\"author\" validate={SubmitUtils.validateName}>\n                          {({ field, form }) => (\n                            <FormControl isInvalid={form.errors.author && form.touched.author} isRequired>\n                              <FormLabel>Author:</FormLabel>\n                              <Input {...field} id=\"author\" placeholder=\"First and last name\" type=\"text\" />\n                              <FormErrorMessage>{form.errors.author}</FormErrorMessage>\n                            </FormControl>\n                          )}\n                        </Field>\n\n                        <Field name=\"question\" validate={SubmitUtils.validateQuestion}>\n                          {({ field, form }) => (\n                            <FormControl isInvalid={form.errors.question && form.touched.question} isRequired>\n                              <FormLabel paddingTop=\"5\">Question:</FormLabel>\n                              <Textarea {...field} id=\"question\" placeholder=\"Your question goes here...\" />\n                              <FormErrorMessage>{form.errors.question}</FormErrorMessage>\n                            </FormControl>\n                          )}\n                        </Field>\n\n                        <FormControl id=\"area\" isRequired>\n                          <FormLabel paddingTop=\"5\">Knowledge Area:</FormLabel>\n                          <Select onChange={(event) => {\n                            updateKnowledgeAreaId(event.target.value)\n                          }} placeholder=\"Select option\" isDisabled={(knowledgeAreas.length === 0)}>\n                            {\n                              knowledgeAreas.map((area)=>{\n                                return(\n                                  <option key={area[\"id\"]} value={area[\"id\"]}>{area[\"areaname\"]}</option>\n                                )\n                              })\n                            }\n                          </Select>\n                        </FormControl>\n\n\n                        <FormControl id=\"dificulty\" isRequired>\n                          <FormLabel paddingTop=\"5\">Question dificulty:</FormLabel>\n                          <Stat>\n                            <StatNumber>{dificulty}</StatNumber>\n                            <Slider onChange={setDificulty} defaultValue={2} min={0} max={5} step={1}>\n                              <SliderTrack>\n                                <SliderFilledTrack />\n                              </SliderTrack>\n                              <SliderThumb />\n                            </Slider>\n                          </Stat>\n                        </FormControl>\n\n                        <FormControl paddingBottom=\"5\" id=\"response\" isRequired>\n                          <FormLabel paddingTop=\"5\">Answer type:</FormLabel>\n                          <Select onChange={\n                            (e) => {\n                              setType(e.target.value);\n                            }\n                          } placeholder=\"Select option\">\n                            <option value=\"multiple\">Multiple choice</option>\n                            <option value=\"open\">Open answer</option>\n                          </Select>\n                        </FormControl>\n\n                        {(type === \"open\") ? <OpenAnswer correctCallback={setOpenAnswer} /> : null}\n                        {(type === \"multiple\") ?  <MultipleChoice ref={multipleChoiceRef} /> : null}\n                        \n                        {redirect ? <Redirect to=\"/quizApp/questions/submit/submission_success\" push /> : null }  \n                        {\n                          // ^^^^ Redirect on submission success\n                        }\n                        <Input onChange={onChangeQuestionImage.bind(this)} ref={questionImage} id=\"question-img\" type=\"file\" style={{display: 'none'}} />\n                        <Input onChange={onChangeResolutionImage.bind(this)} ref={resolutionImage} id=\"resolution-img\" type=\"file\" style={{display: 'none'}} />\n                        <HStack paddingTop=\"5\" paddingBottom=\"5\">\n                          <Button colorScheme={questionImageUploaded !== \"\" ? \"blue\" : \"gray\"} onClick={() => {questionImage.current.click()}} leftIcon={ questionImageUploaded ? null : <ArrowUpIcon />} >{questionImageUploaded ? \"Change\" : \"Upload\"} question image</Button>\n                          <Button colorScheme={resolutionImageUploaded !== \"\" ? \"blue\" : \"gray\"} onClick={() => {resolutionImage.current.click()}} leftIcon={resolutionImageUploaded ? null : <ArrowUpIcon />}>{resolutionImageUploaded ? \"Change\" : \"Upload\"} resolution image</Button>\n                        </HStack>\n\n                        <VStack paddingBottom=\"5\" alignItems=\"stretch\" w=\"full\">\n                            <Button type=\"submit\" isLoading={props.isSubmitting} isDisabled={(knowledgeAreas.length === 0)} colorScheme=\"blue\">Submit</Button>\n                        </VStack>\n                      </Form>\n                      )}\n                  </Formik>\n                  \n              </VStack>\n          </Flex>\n        </Container>\n      </>\n    );\n}\n\nexport default SubmitQuestion;","import { \n    Flex, Heading, VStack, Text, Button\n  } from \"@chakra-ui/react\"\nimport Iframe from 'react-iframe'\nimport { Link } from \"react-router-dom\";\n\n\nfunction SubmissionSuccess() {\n    return (\n        <Flex h=\"90vh\">\n            <VStack alignItems=\"center\" w=\"full\" h=\"full\" p={15}>\n                <Heading size=\"xl\">Thank you for your submission!</Heading>\n                <Text>Your question has been safely saved in our database</Text>\n                <Link to=\"/quizApp/questions/submit\">\n                    <VStack alignItems=\"stretch\" w=\"lg\">\n                        <Button colorScheme=\"blue\">Submit another one!</Button>\n                    </VStack>\n                </Link>\n                <Link to=\"/\">\n                    <VStack alignItems=\"stretch\" w=\"lg\">\n                        <Button>Go home</Button>\n                    </VStack>\n                </Link>\n                <Iframe class=\"giphy-embed\" frameBorder=\"0\" width=\"500\" height=\"300\" src=\"https://giphy.com/embed/342Zsv5S4W8XC\"/>\n            </VStack>\n        </Flex>\n    );\n}\nexport default SubmissionSuccess;","import { Badge } from \"@chakra-ui/react\"\n\n\nfunction StatusBadge(props) {\n    if (props.used === 1) {\n        return (<Badge fontSize={props.size} colorScheme=\"green\">Used</Badge>);\n    } else {\n        return (<Badge fontSize={props.size} colorScheme=\"purple\">Submited</Badge>);\n    }   \n}\n\nfunction ReviewedBadge(props) {\n    if (props.reviewed === 1) {\n        return (<Badge fontSize={props.size} colorScheme=\"green\">Reviewed</Badge>);\n    } else {\n        return (<Badge fontSize={props.size} colorScheme=\"red\">Not reviewed</Badge>);\n    }   \n}\n\nfunction ReviewedBadgeSimple(props) {\n    if (props.reviewed === 1) {\n        return (<Badge fontSize={props.size} colorScheme=\"green\">Yes</Badge>);\n    } else {\n        return (<Badge fontSize={props.size} colorScheme=\"red\">No</Badge>);\n    }   \n}\n\nconst Badges = {\n    StatusBadge: StatusBadge,\n    ReviewedBadge: ReviewedBadge,\n    ReviewedBadgeSimple: ReviewedBadgeSimple,\n}\n\nexport default Badges;","import { useState, useEffect } from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return windowDimensions;\n}","import axios from 'axios'\n\n\nfunction getAuthors() {\n  return axios.get('/api/getAuthors')\n}\n\nconst AuthorAPI = {\n    getAuthors\n}\n\nexport default AuthorAPI;","import KnowledgeAreaAPI from \"../api/knowledgeArea\";\nimport AuthorAPI from \"../api/author\"\n\nclass TransferQuestion {\n    constructor() {\n        this.question = {}\n    }\n\n    updateQuestion(question) {\n        this.question = question\n    }\n}\n\nfunction findInDict(key, value, dict) {\n    let element = []\n    dict.forEach(el => {\n        if (el[key] === value) {\n            element = el;\n        }\n    })\n    return element;\n}\n\nfunction processKnowledgeArea(data, knowledgeAreaDB) {\n    data.forEach((question) => {\n        let entry = findInDict(\"id\", question[\"areaid\"], knowledgeAreaDB)\n        if (entry !== []) {\n            question[\"knowledgeArea\"] = entry[\"areaname\"]\n        } else {\n            question[\"knowledgeArea\"] = \"Not found\"\n        }\n    });\n    return data\n}\n\n\nfunction processAuthorName(data, authorsDB) {\n    data.forEach((question) => {\n        let entry = findInDict(\"id\", question[\"author_id\"], authorsDB)\n        if (entry !== []) {\n            question[\"authorName\"] = entry[\"authorname\"]\n        } else {\n            question[\"authorName\"] = \"Not found\"\n        }\n    });\n    return data\n}\n\nfunction postProcessing(data) {\n    // Process KnowledgeAreaIds\n    return new Promise((resolve, reject) => {\n        let processedData = data\n        KnowledgeAreaAPI.getKnowledgeAreas()\n        .then(res => res.data)\n        .then((knowledgeAreaDB) => {\n            processedData = processKnowledgeArea(processedData, knowledgeAreaDB)\n        })\n        .then(() => {\n            AuthorAPI.getAuthors()\n            .then(res => res.data)\n            .then((authorsDB) => {\n                processedData = processAuthorName(processedData, authorsDB)\n                resolve(processedData)\n            })\n            .catch((err) => {\n                console.log(err)\n                reject(err.message)\n            })\n        })\n        .catch((err) => {\n            console.log(err)\n            reject(err.message)\n        })\n    })\n}\n\nfunction filterArea(area, questions) {\n    let filterQuestions = []\n    if (area !== \"all\") {\n        console.log(\"Search enabled, filtering for: \" + area)\n        questions.forEach((question) => {\n            if (question[\"knowledgeArea\"] === area) {\n                filterQuestions.push(question)\n            }\n        })\n    } else {\n        filterQuestions = questions\n    }\n    return filterQuestions\n}\n\nfunction checkMultipleChoice(rowData) {\n    return !(\n        rowData[\"answera\"] === \"\" &&\n        rowData[\"answerb\"] === \"\" &&\n        rowData[\"answerc\"] === \"\" &&\n        rowData[\"answerd\"] === \"\"\n    );\n}\n\nconst QuestionTableUtils = {\n    TransferQuestion: TransferQuestion,\n    postProcessing: postProcessing,\n    checkMultipleChoice: checkMultipleChoice,\n    filterArea: filterArea\n}\n\nexport default QuestionTableUtils;","export default __webpack_public_path__ + \"static/media/question.3359468e.png\";","import {\n    Box, useRadio\n} from \"@chakra-ui/react\"\n\n\nfunction RadioCard(props) {\n    const { getInputProps, getCheckboxProps } = useRadio(props)\n  \n    const input = getInputProps()\n    const checkbox = getCheckboxProps()\n  \n    return (\n      <Box as=\"label\">\n        <input {...input} disabled/>\n        <Box\n          {...checkbox}\n          cursor=\"pointer\"\n          borderWidth=\"1px\"\n          borderRadius=\"md\"\n          boxShadow=\"md\"\n          _checked={{\n            bg: \"teal.600\",\n            color: \"white\",\n            borderColor: \"teal.600\",\n          }}\n          px={5}\n          py={3}\n        >\n          {props.children}\n        </Box>\n      </Box>\n    )\n  }\n\nexport default RadioCard;\n  ","import {\n    SimpleGrid,\n    useRadioGroup\n} from \"@chakra-ui/react\"\n\nimport RadioCard from './CustomRadioButton'\n\nfunction postProcessing(options) {\n    let newOptions = []\n    options.forEach(element => {\n        if (element !== \"\") {\n            newOptions.push(element)\n        }\n    });\n    return newOptions\n}\n\nfunction MultipleChoice(props) {\n\n    const { getRootProps, getRadioProps } = useRadioGroup({\n        name: \"framework\",\n        defaultValue: props.question[\"correctanswer\"],\n        onChange: console.log,\n    })\n    \n    const group = getRootProps()\n\n    let options = [\n        props.question[\"answera\"],\n        props.question[\"answerb\"],\n        props.question[\"answerc\"],\n        props.question[\"answerd\"],\n    ]\n\n\n    return (\n        <SimpleGrid {...group} paddingTop={5} minChildWidth=\"120px\" spacing=\"40px\">\n            {postProcessing(options).map((value) => {\n                const radio = getRadioProps({ value })\n                return (\n                <RadioCard key={value} {...radio}>\n                    {value}\n                </RadioCard>\n                )\n            })}\n        </SimpleGrid>\n    );\n}\n\nexport default MultipleChoice;","import {\n    Divider, \n    VStack, HStack,\n    Image, Text, \n    Box,\n    Textarea\n} from \"@chakra-ui/react\"\n\nimport Badges from '../../../components/Badges';\nimport useWindowDimensions from '../../../utils/windowDimensions';\nimport QuestionTableUtils from \"../../../utils/questionTableUtils\";\nimport unknowQuestion from '../../../images/question.png'\nimport MultipleChoice from \"../../../components/MultipleChoice\";\n\nfunction QuestionOverview(props) {\n    const { height, } = useWindowDimensions();\n    \n\n\n    return (\n        <>\n            <HStack>\n                {(props.question[\"image_path\"] !== undefined) ?\n                    <Image\n                        borderRadius=\"10\"\n                        boxSize=\"150px\"\n                        src={\"/api/requestFile/\" + props.question[\"image_path\"].split(\"/\")[1]}\n                        fallbackSrc={unknowQuestion}\n                        alt=\"Question image\"\n                    />\n                    :\n                    null\n                }\n                <VStack alignItems=\"start\">\n                    <Box borderRadius={5} borderWidth={1} borderColor=\"gray.600\" overflowY=\"scroll\" maxHeight={height * 0.2}>\n                        <Text fontWeight=\"medium\" padding={2}>{props.question[\"content\"]}</Text>\n                    </Box>\n                    <HStack paddingTop={1}>\n                        <Badges.StatusBadge size=\"0.9em\" used={props.question[\"used\"]} />\n                        <Badges.ReviewedBadge size=\"0.9em\" reviewed={props.question[\"reviewed\"]} />\n                    </HStack>\n                </VStack>\n            </HStack>\n            \n            {QuestionTableUtils.checkMultipleChoice(props.question) ?\n                <MultipleChoice question={props.question} />\n                :\n                <>\n                    <Text paddingBottom={2} fontWeight=\"semibold\" fontSize=\"xl\">Open answer: </Text> \n                    <Textarea resize=\"none\" isReadOnly>\n                        {props.question[\"correctanswer\"]}\n                    </Textarea>\n                </>\n            }\n            <Divider paddingTop={5} orientation=\"horizontal\" />\n            <Text paddingTop={2} fontWeight=\"semibold\" fontSize=\"x-large\">Explanation: </Text> \n            <HStack>\n                {(props.question[\"image_path\"] !== undefined) ?\n                    <Image\n                        borderRadius=\"10\"\n                        boxSize=\"150px\"\n                        src={\"/api/requestFile/\" + props.question[\"resolution_path\"].split(\"/\")[1]}\n                        fallbackSrc={unknowQuestion}\n                        alt=\"Resolution image\"\n                    />\n                    :\n                    null\n                }\n                <VStack alignItems=\"start\">\n                    <Box borderRadius={5} borderWidth={1} borderColor=\"gray.600\" overflowY=\"scroll\" maxHeight={height * 0.2}>\n                        <Text padding={2}>No explanation provided</Text>\n                    </Box>\n                </VStack>\n            </HStack>\n\n        </>\n    );\n}\n\nexport default QuestionOverview;","import * as JsSearch from 'js-search';\n\nexport default class SearchEngine {\n     \n    constructor(uid, dataset) {\n        console.log(\"Init engine\")\n        this.engine = new JsSearch.Search(uid)\n        // Index Data\n        dataset.forEach(entry => {\n            this.engine.addDocument(entry)\n        });\n    }\n\n    performSearch(searchIndexes, query) {\n        // Index Search \"Indexes\"\n        searchIndexes.forEach((index) => {\n            this.engine.addIndex(index)\n        })\n\n        return this.engine.search(query)\n    }\n\n\n}","import {useState, useEffect, useRef } from 'react';\nimport {\n    Container, IconButton,\n    Badge, Divider, \n    VStack, HStack,\n    Image, Text, \n    Heading, Button, \n    Input, useToast, \n    InputGroup, InputRightElement, Box,\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    useDisclosure, Select\n} from \"@chakra-ui/react\"\nimport {\n    MinusIcon,\n    AddIcon,\n} from \"@chakra-ui/icons\"\n\nimport { \n    Table, Column, \n    HeaderCell, Cell\n} from \"rsuite-table\"\n\nimport Badges from '../../../components/Badges';\nimport QuestionOverview from './Question';\n\nimport '../../../style/css/rsuite-table-custom.css';\nimport QuestionsAPI from '../../../api/questions';\nimport QuestionTableUtils from '../../../utils/questionTableUtils';\nimport useWindowDimensions from '../../../utils/windowDimensions';\nimport unknowQuestion from '../../../images/question.png'\nimport SearchEngine from '../../../utils/SearchEngine';\nimport KnowledgeAreaAPI from '../../../api/knowledgeArea';\n\nconst rowKey = 'id';\n\nconst ExpandCell = ({ rowData, dataKey, expandedRowKeys, onChange, ...props }) => (\n  <Cell {...props}>\n    <IconButton\n      size=\"xs\"\n      appearance=\"subtle\"\n      onClick={() => {\n        onChange(rowData);\n      }}\n      icon={\n        expandedRowKeys.some((key) => key === rowData[rowKey]) ? <MinusIcon /> : <AddIcon />\n      }\n    />\n  </Cell>\n);\n\nconst StatusCell = ({ rowData, dataKey, ...props }) => (\n    <Cell {...props}>\n        <Badges.StatusBadge size=\"0.8em\" used={rowData.used} />\n    </Cell>\n);\n\nconst ReviewCell = ({ rowData, dataKey, ...props }) => (\n    <Cell {...props}>\n        <Badges.ReviewedBadgeSimple size=\"0.8em\" reviewed={rowData.reviewed} />\n    </Cell>\n);\n\nfunction ViewQuestions() {\n    const [expandedRowKeys, setExpandedRowKeys] = useState([]);\n    const [questions, updateQuestions] = useState([]);\n    const [ knowledgeAreas, updateKnowledgeAreas] = useState([]);\n    const [ knowledgeArea, updateKnowledgeArea] = useState(\"all\");\n    const [query, updateQuery] = useState(\"\");\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    const { height, width } = useWindowDimensions();\n    const toast = useToast()\n    const selectedEntry = useRef(null)\n    const searchEngine = useRef(null)\n\n    const renderRowExpanded = (rowData) => {\n        return (\n            <>\n                <VStack spacing=\"2\" alignItems=\"start\">\n                    <HStack>\n                        {QuestionTableUtils.checkMultipleChoice(rowData) ?\n                            <Badge ml=\"1\" fontSize=\"0.9em\" colorScheme=\"green\">\n                                Multiple Choice \n                            </Badge>\n                            :\n                            <Badge ml=\"1\" fontSize=\"0.9em\" colorScheme=\"blue\">\n                               Open Answer \n                            </Badge>\n                        }\n                        <Button onClick={() => {\n                            // Transfer question\n                            selectedEntry.current.updateQuestion(rowData)\n                            onOpen()\n                        }} size=\"xs\">\n                            Show full question\n                        </Button>\n                    </HStack>\n                    <HStack>\n                        <Image\n                            borderRadius=\"10\"\n                            boxSize=\"110px\"\n                            src={\"/api/requestFile/\" + rowData[\"image_path\"].split(\"/\")[1]}\n                            fallbackSrc={unknowQuestion}\n                            alt=\"Segun Adebayo\"\n                        />\n                        <Container maxWidth=\"3xl\" alignItems=\"start\">\n                            <Heading as=\"h4\" size=\"md\">Question: </Heading>\n                            <Text noOfLines={4}>\n                                {rowData.content}\n                            </Text>\n                        </Container>\n                    </HStack>\n                    <Divider orientation=\"horizontal\" />\n                    <HStack>\n                        <Image\n                            borderRadius=\"10\"\n                            boxSize=\"110px\"\n                            src={\"/api/requestFile/\" + rowData[\"resolution_path\"].split(\"/\")[1]}\n                            fallbackSrc={unknowQuestion}\n                            alt=\"Segun Adebayo\"\n                        />\n                        <Container maxWidth=\"3xl\" alignItems=\"start\">\n                            <Heading as=\"h4\" size=\"md\">Solution: </Heading>\n                            <Text noOfLines={[1, 2, 3, 4]}>\n                                {rowData.correctanswer}\n                            </Text>\n                        </Container>\n                    </HStack>\n                </VStack>\n            </>\n        );\n    };\n\n    function errorMsg(type, title, msg) {\n        console.log(\"ERROR_MSG: \" + msg)\n        toast({\n            title: title,\n            position: \"top\",\n            description: msg + (title.includes(\"API\") ? \". Please try to reload the page or contact EL&SW team\" : \"\"),\n            status: type,\n            duration: 3000,\n            isClosable: true,\n        })\n    }\n\n    useEffect(() => {\n        selectedEntry.current = new QuestionTableUtils.TransferQuestion()\n        updateQuestions([])\n        updateKnowledgeAreas([])\n        errorMsg(\"info\", \"Loading questions, please wait...\", \"\")\n        QuestionsAPI.getQuestions()\n        .then(res => res.data)\n        .then((data) => QuestionTableUtils.postProcessing(data))\n        .then((data) => {\n            updateQuestions(data)\n            searchEngine.current = new SearchEngine('id', data)\n        })\n        .then(KnowledgeAreaAPI.getKnowledgeAreas()\n        .then(res => res.data)\n        .then((data) => {\n            updateKnowledgeAreas(data)\n        }))\n        .catch((err) => {\n            updateQuestions([])\n            console.log(err)\n            errorMsg(\"error\", \"QuestionsAPI Error:\", err.message)\n        })\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    \n\n    const handleExpanded = (rowData, dataKey) => {\n        let open = false;\n        const nextExpandedRowKeys = [];\n    \n        expandedRowKeys.forEach((key) => {\n          if (key === rowData[rowKey]) {\n            open = true;\n          } else {\n            nextExpandedRowKeys.push(key);\n          }\n        });\n    \n        if (!open) {\n          nextExpandedRowKeys.push(rowData[rowKey]);\n        }\n    \n        setExpandedRowKeys(nextExpandedRowKeys);\n        \n    }; \n\n    return (\n        <>\n            <Box padding={5}>\n                <HStack>\n                    <InputGroup paddingBottom={4} size=\"md\">\n                        <Input\n                            pr=\"4.5rem\"\n                            type=\"text\"\n                            placeholder=\"Search for question\"\n                            value={query}\n                            onChange={(evt) => updateQuery(evt.target.value)}\n                        />\n                        <InputRightElement width=\"4.5rem\">\n                            {\n                                (query.length !== 0) ? <Button h=\"1.75rem\" onClick={() => {updateQuery(\"\")}} size=\"sm\">Clear</Button> : null\n                            }\n                        </InputRightElement>\n                    </InputGroup>\n                    <InputGroup paddingBottom={4} width=\"sm\" size=\"md\">\n                        <Select width=\"sm\" onChange={(event) => {\n                            if (event.target.value === \"\") {\n                                updateKnowledgeArea(\"all\")\n                            } else {\n                                updateKnowledgeArea(event.target.value)\n                            }\n                            }} placeholder=\"All Knowledge Areas\" isDisabled={(knowledgeAreas.length === 0)}>\n                            {\n                                knowledgeAreas.map((area)=>{\n                                return(\n                                    <option key={area[\"id\"]} value={area[\"areaname\"]}>{area[\"areaname\"]}</option>\n                                )\n                                })\n                            }\n                        </Select>\n                    </InputGroup>\n                </HStack>\n                <Table\n                    height={height * 0.70}\n                    width={width*0.9}\n                    rowKey={rowKey}\n                    rowExpandedHeight={300}\n                    expandedRowKeys={expandedRowKeys}\n                    data={ QuestionTableUtils.filterArea(knowledgeArea, (query.length !== 0) ? searchEngine.current.performSearch(['content'], query) : questions)}\n                    shouldUpdateScroll={false}\n                    renderRowExpanded={renderRowExpanded}\n                    affixHeader\n                    virtualized\n                >\n                    <Column width={70} align=\"center\">\n                        <HeaderCell>#</HeaderCell>\n                        <ExpandCell dataKey=\"id\" expandedRowKeys={expandedRowKeys} onChange={handleExpanded} />\n                    </Column>\n\n                    <Column width={120}>\n                        <HeaderCell>State: </HeaderCell>\n                        <StatusCell/>\n                    </Column>\n\n                    <Column width={120}>\n                        <HeaderCell>Reviewed: </HeaderCell>\n                        <ReviewCell/>\n                    </Column>\n\n                    <Column width={500}>\n                        <HeaderCell>Question</HeaderCell>\n                        <Cell dataKey=\"content\" />\n                    </Column>\n                    \n                    <Column width={280}>\n                        <HeaderCell>Knowledge Area</HeaderCell>\n                        <Cell dataKey=\"knowledgeArea\" />\n                    </Column>\n\n                    <Column width={300}>\n                        <HeaderCell>Author</HeaderCell>\n                        <Cell dataKey=\"authorName\" />\n                    </Column>\n\n                    <Column flexGrow={1}>\n                        <HeaderCell>Difficulty</HeaderCell>\n                        <Cell dataKey=\"difficultyid\" />\n                    </Column>\n                </Table>\n            </Box>\n            <Modal size=\"full\" isOpen={isOpen} onClose={onClose}>\n                <ModalOverlay />\n                <ModalContent>\n                    <ModalHeader>{(isOpen) ? selectedEntry.current.question[\"knowledgeArea\"] : \"\"}</ModalHeader>\n                    <ModalCloseButton />\n                    <ModalBody>\n                        {(isOpen) ? \n                          <QuestionOverview question={selectedEntry.current.question} />\n                        : \"\"}\n                    </ModalBody>\n        \n                    <ModalFooter>\n                    <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\n                        Close\n                    </Button>\n                    </ModalFooter>\n                </ModalContent>\n            </Modal>\n        </>\n    );\n}\n\nexport default ViewQuestions;","import { \n    Flex, Heading,\n    Container, VStack\n} from \"@chakra-ui/react\"\nimport Navigation from \"../Navigation\";\nimport QuestionsTable from './QuestionsTable';\n\nfunction ViewQuestions() {\n\n    return (\n        <>\n            <Navigation />\n            <Container maxW=\"-moz-max-content\" p={0}>\n                <Flex>\n                    <VStack alignItems=\"start\" w=\"full\" h=\"full\" p={15}>\n                        <Heading paddingLeft=\"5\" size=\"xl\">Submitted questions</Heading>\n                        <QuestionsTable/>\n                    </VStack>\n                </Flex>\n            </Container>\n        </>\n    );\n}\n\nexport default ViewQuestions;","import { \n    Flex, Heading, VStack, Text, Button, Container\n} from \"@chakra-ui/react\"\nimport useWindowDimensions from '../../../utils/windowDimensions';\nimport Board from 'react-trello'\nimport Navigation from \"../Navigation\";\n\nconst data = {\n    lanes: [\n        {\n            id: 'lane1',\n            title: 'My quiz #1',\n            editLaneTitle: true,\n            label: '',\n            cards: []\n        },\n        {\n            id: 'lane2',\n            title: 'From questions database',\n            label: '',\n            cards: [\n                {id: '88', title: 'EL&SW', description: 'Can AI make memes', label: 'Multiple choice'},\n                {id: '89', title: 'EL&SW', description: 'Can AI make memes', label: 'Multiple choice'},\n                {id: '90', title: 'EL&SW', description: 'Can AI make memes', label: 'Multiple choice'},\n                {id: '45', title: 'EL&SW', description: 'Can AI make memes', label: 'Multiple choice'},\n                {id: '16', title: 'EL&SW', description: 'Can AI make memes', label: 'Multiple choice'},\n                {id: '10', title: 'EL&SW', description: 'Can AI make memes', label: 'Multiple choice'},\n            ]\n        }\n    ]\n}\n  \n\nfunction CreateQuiz() {\n    const { height, width } = useWindowDimensions();\n\n    return (\n        <>\n            <Navigation />\n            <Container maxW=\"-moz-max-content\" p={0}>\n                <Flex paddingLeft={5}>\n                    <VStack alignItems=\"stretch\" w=\"full\" h=\"full\" p={15}>\n                        <Heading size=\"xl\">Create quiz</Heading>\n                        <Text >Just drag the questions from the right table to the left table</Text>\n                        \n                        <Board \n                            cardDragClass=\"draggingCard\"\n                            data={data} \n                            laneStyle={{\n                                \"maxHeight\": height * 0.60,\n                                \"width\": (width * 0.94) / 2,\n                                \"backgroundColor\": \"#161b24\",\n                                \"color\": \"#ffffffeb\",\n                            }}\n                            cardStyle={{\n                                \"maxWidth\": \"none\",\n                                \"backgroundColor\": \"#ffffff14\",\n                                \"borderRadius\": \"6px\",\n                            }}\n                            style={{\n                                \"height\": height * 0.65,\n                                \"backgroundColor\": \"transparent\",\n                                \"padding\": 0,\n                                \"alignSelf\": \"center\",\n                            }}\n                        />\n                        \n                        <Button size=\"lg\" colorScheme=\"blue\">Create quiz</Button>\n                        \n                    </VStack>\n                </Flex>\n            </Container>\n        </>\n    );\n}\nexport default CreateQuiz;","import { Flex, Heading, Button, Container, VStack, Text } from \"@chakra-ui/react\"\nimport { Link } from \"react-router-dom\";\nimport Navigation from \"./Navigation\";\n\nfunction QuizAppHome() {\n    return (\n      <>\n        <Navigation />\n        <Container maxW=\"container.lg\" p={0}>\n          <Flex h=\"80vh\">\n              <VStack w=\"full\" h=\"full\" p={15}>\n                <Heading size=\"2xl\">FST Quizz App</Heading>\n                <Text fontSize=\"xl\">\n                  A tool that gets you ready for those hard af FSG quizzes\n                </Text>\n                <Link to=\"/quizApp/questions/submit\">\n                  <VStack w=\"lg\" align=\"stretch\">\n                      <Button size=\"lg\" colorScheme=\"blue\">Submit question</Button>\n                  </VStack>\n                </Link>\n              </VStack>\n          </Flex>\n        </Container>\n      </>\n    );\n}\n\nexport default QuizAppHome;","import { Flex, Heading, Button, Container, VStack, Text } from \"@chakra-ui/react\"\nimport { Link } from \"react-router-dom\";\n\nfunction NotFound() {\n    return (\n      <Container maxW=\"container.lg\" p={0}>\n        <Flex h=\"80vh\">\n            <VStack w=\"full\" h=\"full\" p={15}>\n              <Heading size=\"2xl\">Oops, its a 404</Heading>\n              <Text fontSize=\"xl\">\n                We gave our best effort but we couldn't find what you are looking for\n              </Text>\n              <Link to=\"/\"><Button size=\"lg\" colorScheme=\"blue\">Take me home</Button></Link>\n            </VStack>\n        </Flex>\n      </Container>\n    );\n}\n\nexport default NotFound;","import MainPage from './pages/MainPage';\n\nimport SubmitQuestion from './pages/quizApp/submissions/SubmitQuestion';\nimport SubmitSuccess from './pages/quizApp/submissions/SubmissionSuccess'\nimport ViewQuestions from './pages/quizApp/view_questions/ViewQuestions';\nimport CreateQuiz from './pages/quizApp/create_quiz/CreateQuiz'\nimport QuizAppHome from './pages/quizApp/Home'\n\nimport NotFound from './pages/NotFound';\n\nimport {\n    Switch,\n    Route\n  } from \"react-router-dom\";\n\nfunction AppRoutes() {\n    return (\n        <Switch>\n          <Route exact path=\"/\">\n            <MainPage />\n          </Route>\n          <Route exact path=\"/quizApp/\">\n            <QuizAppHome />\n          </Route>\n          <Route path=\"/quizApp/questions/submit\">\n              <SubmitQuestion/>\n          </Route>\n          <Route path=\"/quizApp/questions/submit/submission_success\">\n              <SubmitSuccess/>\n          </Route>\n          <Route path=\"/quizApp/questions/view\">\n              <ViewQuestions/>\n          </Route>\n          <Route path=\"/quizApp/quiz/create\">\n              <CreateQuiz/>\n          </Route>\n          <Route path=\"*\">\n            <NotFound />\n          </Route>\n        </Switch>\n    );\n}\n\nexport default AppRoutes;","import './App.css';\nimport { useColorMode } from \"@chakra-ui/react\"\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\n\nimport AppRoutes from \"./routes\";\n\nfunction App() {\n  const { colorMode, toggleColorMode } = useColorMode()\n\n  if (colorMode === \"light\") {\n    toggleColorMode();\n  }\n\n  return (\n    <Router>\n      <AppRoutes/>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// 1. import `ChakraProvider` component\nimport { ChakraProvider, ColorModeScript } from \"@chakra-ui/react\"\n\n\nfunction Provider() {\n  return (\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  );\n}\n\nReactDOM.render(\n  <>\n  <ColorModeScript initialColorMode='dark' />\n  <Provider />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}